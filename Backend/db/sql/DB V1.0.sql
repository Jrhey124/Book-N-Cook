--
-- PostgreSQL database dump
--

-- Dumped from database version 16.8
-- Dumped by pg_dump version 16.8

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: citext; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;


--
-- Name: EXTENSION citext; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION citext IS 'data type for case-insensitive character strings';


--
-- Name: comment_post_vote_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.comment_post_vote_enum AS ENUM (
    'UP',
    'DOWN',
    'NEUTRAL'
);


ALTER TYPE public.comment_post_vote_enum OWNER TO postgres;

--
-- Name: ingredient_category; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.ingredient_category AS ENUM (
    'Plant-based',
    'Animal-based',
    'Seafood',
    'Dairy',
    'Grain-based',
    'Processed Food',
    'Condiments and Sauces',
    'Beverages',
    'Sweeteners',
    'Fats and Oils',
    'Additives and Preservatives',
    'Spices and Herbs',
    'Fermented Products'
);


ALTER TYPE public.ingredient_category OWNER TO postgres;

--
-- Name: recipe_type_category; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.recipe_type_category AS ENUM (
    'Meal Type',
    'Cuisine Type',
    'Dietary Restrictions/Preferences',
    'Cooking Methods',
    'Difficulty Level',
    'Flavor Profiles',
    'Time & Preparation',
    'Occasion/Theme'
);


ALTER TYPE public.recipe_type_category OWNER TO postgres;

--
-- Name: user_profile_sex_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.user_profile_sex_enum AS ENUM (
    'Female',
    'Male'
);


ALTER TYPE public.user_profile_sex_enum OWNER TO postgres;

--
-- Name: user_profile_status_enum; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.user_profile_status_enum AS ENUM (
    'private',
    'public',
    'restricted'
);


ALTER TYPE public.user_profile_status_enum OWNER TO postgres;

--
-- Name: visibility; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.visibility AS ENUM (
    'public',
    'private',
    'restricted'
);


ALTER TYPE public.visibility OWNER TO postgres;

--
-- Name: sync_user_profile_deletion(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_user_profile_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  UPDATE user_profile
  SET is_deleted = (NEW.deleted_at IS NOT NULL)
  WHERE user_profile.id = NEW.user_id;
  
  RETURN NEW;
END;
$$;


ALTER FUNCTION public.sync_user_profile_deletion() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: category; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.category (
    id integer NOT NULL,
    category public.citext NOT NULL,
    type public.recipe_type_category,
    is_allowed boolean
);


ALTER TABLE public.category OWNER TO postgres;

--
-- Name: Category_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.category ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Category_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: ingredient; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ingredient (
    id integer NOT NULL,
    name public.citext,
    type public.ingredient_category,
    is_allowed boolean
);


ALTER TABLE public.ingredient OWNER TO postgres;

--
-- Name: Ingredients_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.ingredient ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public."Ingredients_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: comment_reaction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.comment_reaction (
    user_id integer NOT NULL,
    comment_id integer NOT NULL,
    vote public.comment_post_vote_enum DEFAULT 'NEUTRAL'::public.comment_post_vote_enum,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.comment_reaction OWNER TO postgres;

--
-- Name: comments; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.comments (
    id integer NOT NULL,
    ref_id integer,
    post_id integer NOT NULL,
    user_id integer NOT NULL,
    comments text,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    public_id uuid DEFAULT gen_random_uuid(),
    deleted_at timestamp without time zone
);


ALTER TABLE public.comments OWNER TO postgres;

--
-- Name: comments_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.comments ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.comments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: followers; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.followers (
    following_user_id integer NOT NULL,
    follower_user_id integer NOT NULL
);


ALTER TABLE public.followers OWNER TO postgres;

--
-- Name: post_reaction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.post_reaction (
    user_id integer NOT NULL,
    post_id integer NOT NULL,
    vote public.comment_post_vote_enum DEFAULT 'NEUTRAL'::public.comment_post_vote_enum,
    created_at timestamp without time zone DEFAULT now()
);


ALTER TABLE public.post_reaction OWNER TO postgres;

--
-- Name: post_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.post_tags (
    post_id integer NOT NULL,
    tags_id integer NOT NULL
);


ALTER TABLE public.post_tags OWNER TO postgres;

--
-- Name: postmedia; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.postmedia (
    post_id integer,
    fname character varying(50),
    media_type character varying(10),
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    file_hash text,
    CONSTRAINT postmedia_media_type_check CHECK (((media_type)::text = ANY ((ARRAY['image'::character varying, 'video'::character varying, 'gif'::character varying])::text[])))
);


ALTER TABLE public.postmedia OWNER TO postgres;

--
-- Name: posts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.posts (
    id integer NOT NULL,
    ref_id integer,
    title character varying(255) NOT NULL,
    content text,
    user_id integer NOT NULL,
    view_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    updated_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    visibility public.visibility DEFAULT 'public'::public.visibility,
    public_id uuid DEFAULT gen_random_uuid(),
    deleted_at timestamp without time zone
);


ALTER TABLE public.posts OWNER TO postgres;

--
-- Name: COLUMN posts.content; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.posts.content IS 'Content of the post';


--
-- Name: posts_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.posts ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.posts_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: rc_junction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.rc_junction (
    recipe_id integer NOT NULL,
    category_id integer NOT NULL
);


ALTER TABLE public.rc_junction OWNER TO postgres;

--
-- Name: recipe_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.recipe_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER SEQUENCE public.recipe_id_seq OWNER TO postgres;

--
-- Name: recipe; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recipe (
    id integer DEFAULT nextval('public.recipe_id_seq'::regclass) NOT NULL,
    title character varying(20),
    author_id integer NOT NULL,
    description text,
    view_count integer DEFAULT 0,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    public_id uuid DEFAULT gen_random_uuid(),
    prep_time integer,
    cook_time integer,
    servings integer,
    difficulty text,
    updated_at timestamp without time zone DEFAULT now(),
    steps text[] NOT NULL,
    click_count integer DEFAULT 0,
    thumbnail character varying(50),
    deleted_at timestamp without time zone,
    CONSTRAINT recipe_difficulty_check CHECK ((difficulty = ANY (ARRAY['Easy'::text, 'Medium'::text, 'Hard'::text])))
);


ALTER TABLE public.recipe OWNER TO postgres;

--
-- Name: recipe_rating; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recipe_rating (
    recipe_id integer,
    user_id integer,
    rating smallint,
    content text,
    fname character varying(50)
);


ALTER TABLE public.recipe_rating OWNER TO postgres;

--
-- Name: recipemedia; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.recipemedia (
    recipe_id integer NOT NULL,
    fname character varying(50) NOT NULL,
    media_type character varying(10) NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    file_hash text NOT NULL,
    number smallint,
    CONSTRAINT recipemedia_media_type_check CHECK (((media_type)::text = ANY ((ARRAY['image'::character varying, 'video'::character varying])::text[])))
);


ALTER TABLE public.recipemedia OWNER TO postgres;

--
-- Name: ri_junction; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.ri_junction (
    recipe_id integer,
    unit character varying(5),
    ingredient_id integer,
    quantity real
);


ALTER TABLE public.ri_junction OWNER TO postgres;

--
-- Name: saved_posts; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.saved_posts (
    user_id integer NOT NULL,
    post_uuid uuid NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.saved_posts OWNER TO postgres;

--
-- Name: saved_recipes; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.saved_recipes (
    user_id integer NOT NULL,
    recipe_uuid uuid NOT NULL,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE public.saved_recipes OWNER TO postgres;

--
-- Name: tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.tags (
    id integer NOT NULL,
    name public.citext NOT NULL,
    description text
);


ALTER TABLE public.tags OWNER TO postgres;

--
-- Name: tags_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.tags ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.tags_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: user_profile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_profile (
    id integer NOT NULL,
    picture character varying(50),
    biography character varying(100),
    username character varying(30) NOT NULL,
    nationality character varying(30),
    sex public.user_profile_sex_enum,
    status public.user_profile_status_enum DEFAULT 'public'::public.user_profile_status_enum,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    birthday date,
    public_id uuid DEFAULT gen_random_uuid(),
    token_id uuid DEFAULT gen_random_uuid(),
    is_deleted boolean DEFAULT false
);


ALTER TABLE public.user_profile OWNER TO postgres;

--
-- Name: user_tags; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_tags (
    user_id integer NOT NULL,
    tags_id integer NOT NULL
);


ALTER TABLE public.user_tags OWNER TO postgres;

--
-- Name: userdata; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.userdata (
    user_id integer NOT NULL,
    password_hashed character varying(60) NOT NULL,
    email character varying(254) NOT NULL,
    verified_email boolean DEFAULT false,
    created_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP,
    deleted_at timestamp without time zone
);


ALTER TABLE public.userdata OWNER TO postgres;

--
-- Name: userdata_user_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.userdata ALTER COLUMN user_id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.userdata_user_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: category; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.category (id, category, type, is_allowed) FROM stdin;
\.


--
-- Data for Name: comment_reaction; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.comment_reaction (user_id, comment_id, vote, created_at) FROM stdin;
\.


--
-- Data for Name: comments; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.comments (id, ref_id, post_id, user_id, comments, created_at, updated_at, public_id, deleted_at) FROM stdin;
20	\N	84	25	grabi ba	2025-04-21 21:49:12.827705	2025-04-21 21:50:12.360122	8114485b-9f22-465e-9c15-f569860e14f5	\N
21	\N	84	25	grabi nga HAHAHAHA	2025-04-21 22:12:57.231513	2025-04-21 22:12:57.231513	c368637c-0885-47be-ba60-99eb76b68763	\N
22	\N	84	25	grabi nga HAHAHAHA	2025-04-21 22:57:35.658449	2025-04-21 22:57:35.658449	70cf769a-5d60-499a-b4f1-24d8bee1568b	\N
23	\N	84	25	grabi nga HAHAHAHA	2025-04-21 22:58:02.910183	2025-04-21 22:58:02.910183	5b8915d3-78fc-49ff-bdd7-07e20397146d	\N
24	\N	84	25	grabi nga HAHAHAHAssa	2025-04-21 22:58:08.592879	2025-04-21 22:58:08.592879	61c5835a-c673-4d71-bf58-bc4013bc95fc	\N
\.


--
-- Data for Name: followers; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.followers (following_user_id, follower_user_id) FROM stdin;
\.


--
-- Data for Name: ingredient; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ingredient (id, name, type, is_allowed) FROM stdin;
\.


--
-- Data for Name: post_reaction; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.post_reaction (user_id, post_id, vote, created_at) FROM stdin;
25	84	DOWN	2025-04-22 00:16:57.965931
\.


--
-- Data for Name: post_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.post_tags (post_id, tags_id) FROM stdin;
\.


--
-- Data for Name: postmedia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.postmedia (post_id, fname, media_type, created_at, file_hash) FROM stdin;
\.


--
-- Data for Name: posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.posts (id, ref_id, title, content, user_id, view_count, created_at, updated_at, visibility, public_id, deleted_at) FROM stdin;
84	\N	nilagang baboy		25	0	2025-04-21 21:48:44.198426	2025-04-21 21:48:44.198426	public	a7939ed8-3d96-4868-ae78-8deca15b502c	\N
\.


--
-- Data for Name: rc_junction; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.rc_junction (recipe_id, category_id) FROM stdin;
\.


--
-- Data for Name: recipe; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recipe (id, title, author_id, description, view_count, created_at, public_id, prep_time, cook_time, servings, difficulty, updated_at, steps, click_count, thumbnail, deleted_at) FROM stdin;
\.


--
-- Data for Name: recipe_rating; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recipe_rating (recipe_id, user_id, rating, content, fname) FROM stdin;
\.


--
-- Data for Name: recipemedia; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.recipemedia (recipe_id, fname, media_type, created_at, file_hash, number) FROM stdin;
\.


--
-- Data for Name: ri_junction; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.ri_junction (recipe_id, unit, ingredient_id, quantity) FROM stdin;
\.


--
-- Data for Name: saved_posts; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.saved_posts (user_id, post_uuid, created_at) FROM stdin;
\.


--
-- Data for Name: saved_recipes; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.saved_recipes (user_id, recipe_uuid, created_at) FROM stdin;
\.


--
-- Data for Name: tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.tags (id, name, description) FROM stdin;
\.


--
-- Data for Name: user_profile; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_profile (id, picture, biography, username, nationality, sex, status, created_at, birthday, public_id, token_id, is_deleted) FROM stdin;
24	\N	\N	user	\N	\N	public	2025-04-21 20:53:45.359486	\N	205d7e26-cf35-4749-a971-ba8d61280aa4	a93012c6-604f-4d15-9ed5-20cef8e19042	f
25	\N	\N	johnny123	\N	\N	public	2025-04-21 21:47:35.84926	\N	b2834671-beb3-4107-878c-79c4ae220293	1bd6dd63-7e78-4fbf-b828-28e1fe585ff4	f
\.


--
-- Data for Name: user_tags; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_tags (user_id, tags_id) FROM stdin;
\.


--
-- Data for Name: userdata; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.userdata (user_id, password_hashed, email, verified_email, created_at, deleted_at) FROM stdin;
24	$2b$10$RxdVRthwymZ5eBakXv19ReoO9aYvL2aUj8Nrjv0YhSRcELBGMc3CG	user@gmail.com	f	2025-04-21 20:53:45.356454	\N
25	$2b$10$e5T/C1BZwfZDVkRXxS7I6eHao28V5rl1bP7iaept1UYM5jYq7FiE.	john@gmail.com	f	2025-04-21 21:47:35.846077	\N
\.


--
-- Name: Category_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Category_id_seq"', 103, true);


--
-- Name: Ingredients_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public."Ingredients_id_seq"', 173, true);


--
-- Name: comments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.comments_id_seq', 24, true);


--
-- Name: posts_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.posts_id_seq', 84, true);


--
-- Name: recipe_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.recipe_id_seq', 58, true);


--
-- Name: tags_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.tags_id_seq', 50, true);


--
-- Name: userdata_user_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.userdata_user_id_seq', 25, true);


--
-- Name: category Category_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT "Category_pkey" PRIMARY KEY (id);


--
-- Name: ingredient Ingredients_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient
    ADD CONSTRAINT "Ingredients_pkey" PRIMARY KEY (id);


--
-- Name: recipe Recipes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe
    ADD CONSTRAINT "Recipes_pkey" PRIMARY KEY (id);


--
-- Name: comments comments_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_pkey PRIMARY KEY (id);


--
-- Name: tags constraint_name; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT constraint_name UNIQUE (name);


--
-- Name: posts posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_pkey PRIMARY KEY (id);


--
-- Name: posts posts_public_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_public_id_key UNIQUE (public_id);


--
-- Name: recipe recipe_public_id_unique; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe
    ADD CONSTRAINT recipe_public_id_unique UNIQUE (public_id);


--
-- Name: saved_posts saved_posts_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_posts
    ADD CONSTRAINT saved_posts_pkey PRIMARY KEY (user_id, post_uuid);


--
-- Name: saved_recipes saved_recipes_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_recipes
    ADD CONSTRAINT saved_recipes_pkey PRIMARY KEY (user_id, recipe_uuid);


--
-- Name: tags tags_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (id);


--
-- Name: category unique_category_name; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.category
    ADD CONSTRAINT unique_category_name UNIQUE (category);


--
-- Name: followers unique_follow_relationship; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT unique_follow_relationship UNIQUE (following_user_id, follower_user_id);


--
-- Name: ingredient unique_ingredients_name; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ingredient
    ADD CONSTRAINT unique_ingredients_name UNIQUE (name);


--
-- Name: ri_junction unique_recipe_ingredient; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ri_junction
    ADD CONSTRAINT unique_recipe_ingredient UNIQUE (recipe_id, ingredient_id);


--
-- Name: comment_reaction unique_user_comment_reaction; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT unique_user_comment_reaction UNIQUE (user_id, comment_id);


--
-- Name: post_reaction unique_user_post_reaction; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_reaction
    ADD CONSTRAINT unique_user_post_reaction UNIQUE (user_id, post_id);


--
-- Name: user_profile user_profile_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_id_key UNIQUE (id);


--
-- Name: user_profile user_profile_public_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_public_id_key UNIQUE (public_id);


--
-- Name: user_profile user_profile_token_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_token_id_key UNIQUE (token_id);


--
-- Name: userdata userdata_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.userdata
    ADD CONSTRAINT userdata_pkey PRIMARY KEY (user_id);


--
-- Name: idx_followers_following_followed; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_followers_following_followed ON public.followers USING btree (following_user_id, follower_user_id);


--
-- Name: idx_postmedia_post_id_media_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_postmedia_post_id_media_type ON public.postmedia USING btree (post_id, media_type);


--
-- Name: idx_public_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_public_id ON public.user_profile USING btree (public_id);


--
-- Name: idx_recipemedia_recipe_id_media_type; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_recipemedia_recipe_id_media_type ON public.recipemedia USING btree (recipe_id, media_type);


--
-- Name: idx_token_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_token_id ON public.user_profile USING btree (token_id);


--
-- Name: userdata trg_sync_user_profile_deletion; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trg_sync_user_profile_deletion AFTER UPDATE OF deleted_at ON public.userdata FOR EACH ROW EXECUTE FUNCTION public.sync_user_profile_deletion();


--
-- Name: rc_junction RC_junction_category_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rc_junction
    ADD CONSTRAINT "RC_junction_category_id_fkey" FOREIGN KEY (category_id) REFERENCES public.category(id) ON DELETE CASCADE;


--
-- Name: rc_junction RC_junction_recipe_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.rc_junction
    ADD CONSTRAINT "RC_junction_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES public.recipe(id) ON DELETE CASCADE;


--
-- Name: ri_junction RI_junction_ingredient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ri_junction
    ADD CONSTRAINT "RI_junction_ingredient_id_fkey" FOREIGN KEY (ingredient_id) REFERENCES public.ingredient(id) ON DELETE CASCADE;


--
-- Name: ri_junction RI_junction_recipe_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.ri_junction
    ADD CONSTRAINT "RI_junction_recipe_id_fkey" FOREIGN KEY (recipe_id) REFERENCES public.recipe(id) ON DELETE CASCADE;


--
-- Name: recipe Recipes_author_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe
    ADD CONSTRAINT "Recipes_author_id_fkey" FOREIGN KEY (author_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: comment_reaction comment_reactions_comment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT comment_reactions_comment_id_fkey FOREIGN KEY (comment_id) REFERENCES public.comments(id) ON DELETE CASCADE;


--
-- Name: comment_reaction comment_reactions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comment_reaction
    ADD CONSTRAINT comment_reactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: comments comments_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;


--
-- Name: comments comments_ref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_ref_id_fkey FOREIGN KEY (ref_id) REFERENCES public.comments(id) ON DELETE CASCADE;


--
-- Name: comments comments_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.comments
    ADD CONSTRAINT comments_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: followers followers_followed_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT followers_followed_user_id_fkey FOREIGN KEY (follower_user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: followers followers_following_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.followers
    ADD CONSTRAINT followers_following_user_id_fkey FOREIGN KEY (following_user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: post_reaction post_reactions_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_reaction
    ADD CONSTRAINT post_reactions_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;


--
-- Name: post_reaction post_reactions_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_reaction
    ADD CONSTRAINT post_reactions_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: postmedia postmedia_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.postmedia
    ADD CONSTRAINT postmedia_post_id_fkey FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;


--
-- Name: post_tags postsTags_post_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tags
    ADD CONSTRAINT "postsTags_post_id_fkey" FOREIGN KEY (post_id) REFERENCES public.posts(id) ON DELETE CASCADE;


--
-- Name: post_tags postsTags_tags_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.post_tags
    ADD CONSTRAINT "postsTags_tags_id_fkey" FOREIGN KEY (tags_id) REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: posts posts_ref_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_ref_id_fkey FOREIGN KEY (ref_id) REFERENCES public.posts(id) ON DELETE CASCADE;


--
-- Name: posts posts_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.posts
    ADD CONSTRAINT posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: recipe_rating recipe_rating_recipe_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe_rating
    ADD CONSTRAINT recipe_rating_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES public.recipe(id) ON DELETE CASCADE;


--
-- Name: recipe_rating recipe_rating_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipe_rating
    ADD CONSTRAINT recipe_rating_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: recipemedia recipemedia_recipe_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.recipemedia
    ADD CONSTRAINT recipemedia_recipe_id_fkey FOREIGN KEY (recipe_id) REFERENCES public.recipe(id) ON DELETE CASCADE;


--
-- Name: saved_posts saved_posts_post_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_posts
    ADD CONSTRAINT saved_posts_post_uuid_fkey FOREIGN KEY (post_uuid) REFERENCES public.posts(public_id) ON DELETE CASCADE;


--
-- Name: saved_posts saved_posts_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_posts
    ADD CONSTRAINT saved_posts_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: saved_recipes saved_recipes_recipe_uuid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_recipes
    ADD CONSTRAINT saved_recipes_recipe_uuid_fkey FOREIGN KEY (recipe_uuid) REFERENCES public.recipe(public_id) ON DELETE CASCADE;


--
-- Name: saved_recipes saved_recipes_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.saved_recipes
    ADD CONSTRAINT saved_recipes_user_id_fkey FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- Name: user_profile user_profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_profile
    ADD CONSTRAINT user_profile_id_fkey FOREIGN KEY (id) REFERENCES public.userdata(user_id) ON DELETE CASCADE;


--
-- Name: user_tags usersTags_tags_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tags
    ADD CONSTRAINT "usersTags_tags_id_fkey" FOREIGN KEY (tags_id) REFERENCES public.tags(id) ON DELETE CASCADE;


--
-- Name: user_tags usersTags_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_tags
    ADD CONSTRAINT "usersTags_user_id_fkey" FOREIGN KEY (user_id) REFERENCES public.user_profile(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

